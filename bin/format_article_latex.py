#!/usr/bin/env python

import argparse
import re
import shutil
import yaml
from pathlib import Path


def check_exists(fp):
    '''Check if file in fp exists
    
    :param fp: Path object to file to test
    '''
    if not fp.exists():
        raise ValueError("%s does not exist" % fp)


def format_article(orig_article_fp, ref_fp, format_article_dp, journal):
    '''Read article content, format it for PloS template and export it
    
    1. Extract metadata needed by pandoc from tutorial and contributors
    2. Format tutorial content (boxes)
    3. Write in the output file

    :param orig_article_fp: Path object to file with original article from pandoc
    :param ref_fp: Path object to file with formatted references
    :param format_article_dp: Path object to file with formatted article for latex
    :param journal: Journal
    '''
    content = []
    with orig_article_fp.open("r") as orig_article_f:
        orig_content = orig_article_f.readlines()
        for l in orig_content:
            # add extra line before hands-on
            if '\emph{Hands-on' in l:
                l = '\\vspace{5mm}\n' + l
            # format figures
            elif 'egin{figure}' in l:
                l = l[:-1] + '[!h]\n'
            elif '\centering' in l:
                continue
            elif '\includegraphics' in l:
                continue
            # remove extra lines
            #elif '\hypertarget{' in l:
            #    continue
            #elif 'tightlist\n' in l:
            #    continue
            # remove bibliography
            elif 'begin{thebibliography}' in l:
                l = '%' + l
            elif 'bibliography{references}' in l:
                l = '%' + l
            elif 'end{thebibliography}' in l:
                l = '%' + l
            # remove temporary end of document
            elif 'end{document}' in l:
                continue
            content.append(l)
    format_content = ''.join(content)

    # use non enumerate section
    format_content = format_content.replace('section{', 'section*{')
    
    # add references
    #if journal == 'plos':
    #    ref = ''
    #    with ref_fp.open("r") as ref_f:
    #        ref = ref_f.read()
    #    format_content += ref
    #    format_content += '\end{document}'
        
    with format_article_dp.open("w") as format_article_f:
        format_article_f.write(format_content)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Format the latex generated by pandoc before latex')
    parser._action_groups.pop()
    required = parser.add_argument_group('required arguments')
    required.add_argument('-a', '--article', help="Path to article directory", required=True)
    required.add_argument('-j', '--journal', help="Journal", required=True)
    args = parser.parse_args()

    # get file paths
    article_dp = Path(args.article)
    check_exists(article_dp)
    orig_article_fp =  article_dp / "article_2.tex"
    check_exists(orig_article_fp)
    ref_fp = Path()
    #ref_fp =  article_dp / "article_2.bbl"
    #check_exists(ref_fp)
    format_article_dp = article_dp / "article_3.tex"

    # format tutorial
    format_article(orig_article_fp, ref_fp, format_article_dp, args.journal)

    